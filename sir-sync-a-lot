#!/usr/bin/env ruby

# todo
# ./sir-syncalot setup
#   - asks for aws creds and bucket
#   - checks if bucket is empty or not exists and prompts and shit
#   - asks for filepath (abs is best)
#   - asks for job name (defualts to default) and shit, stores in ~/.sir-syncalot/config.yml
#   - asks for log path
# ./sir-syncalot sync [job]
#   - looks for last sync saved on disk
#   - checks for lock, places one otherwise
#   - does md5 otherwise and syncs with output and logs too!

require 'yaml'

class SirSyncalot

  def self.run!(*args)
    new(*args).run!
  end

  [:action, :config].each { |member| attr(member) }

  def initialize(action = "sync")
    @action = action
  end

  def run!
    validate_inputs!
    perform_action!
  end

private

  def validate_inputs!
    if setup_action? and config_exists?
      exit_with_error!("Can't make a setup, because there's already a configuration in '#{config_path}'.")
    elsif sync_action? and !config_exists?
      exit_with_error!("Can't make a sync, because there's no configuration, try '#{__FILE__} setup'.")
    end
  end

  def perform_action!
    if setup_action?
      perform_setup!
    elsif sync_action?
      perform_sync!
    elsif help_action?
      display_help!
    else
      exit_with_error!("Cannot perform action '#{@action}', try '#{__FILE__} help' for usage.")
    end
  end

  def setup_action?
    action == "setup"
  end

  def sync_action?
    action == "sync"
  end

  def help_action?
    action == "help"
  end

  def perform_setup!
    display("Hello! Ima ask you a few questions, and store the results in #{config_path} for later, OK?")

    config = {}

    config[:aws_access_key] = ask("What is the AWS access key?")
    config[:aws_secret_key] = ask("What is the AWS secret access key?")
    display("Just a sec, ima check that works...")
    if aws_credentials_valid?(config)
      display("Yep, all good.")
      config[:aws_dest_bucket] = ask("What bucket should we put your backups in? (If it doesn't exist I'll create it)")
      if bucket_exists?(config)
        if bucket_empty?(config)
          display("I found that the bucket already exists, and it's empty so I'm happy.")
        else
          exit_with_error!("I found the bucket to exist, but it's not empty. I can't sync to a bucket that is not empty.")
        end
      else
        display("The bucket doesn't exist, so I'm creating it now...")
        create_bucket(config)
        display("OK that's done.")
      end
    else
      exit_with_error!("I couldn't connect to S3 with the credentials you supplied, try again much?")
    end

    config[:local_file_path] = ask("What is the (absolute) path that you want to back up? (i.e. /var/www not ./www)")
    if !local_file_path_exists?(config)
      exit_with_error!("I find that the local file path you supplied doesn't exist, wrong much?")
    end

    config[:find_options] = ask("Do you have any options for find ? (e.g. \! -path \"*.git*). Press enter for defaults.")

    display("Right, I'm writing out the details you supplied to '#{config_path}' for my future reference...")
    write_config!(config)
    display("You're good to go. Next up is '#{__FILE__} sync' to syncronise your files to S3.")
  end

  def aws_credentials_valid?(config = read_config())
    true
  end

  def bucket_exists?(config = read_config())
    true
  end

  def bucket_empty?(config = read_config())
    true  
  end

  def create_bucket(config = read_config())
  end

  def local_file_path_exists?(config = read_config())
    true
  end

  def write_config!(config)
    open(config_path, 'w') { |f| YAML::dump(config, f) }
  end

  def read_config(reload = false)
    reload or !@config ? @config = open(config_path, 'r') { |f| YAML::load(f) } : @config
  end

  def perform_sync!
    display("Syncing...")
    # check can connect, bucket exists, filepath exists
    # if there was a last backup run at a certain time, get a list of changed files
    # if no backup has been run, perform a full push (also, md5 checksum comparison 
    # is only required for files that exist on both origin and source)
  end

  def display_help!
    display("Hahaha. Sif.")
  end

  def exit_with_error!(message)
    display("Sir Syncalot wails in agony! " + message)
    exit
  end

  def display(message)
    puts(message)
  end

  def ask(question)
    print(question + ": ")
    $stdin.readline.chomp # gets doesn't work here!
  end

  def config_exists?
    File.exist?(config_path)
  end

  def config_path
    ENV['HOME'] + "/.sir-sync-a-lot.yml"
  end

end

SirSyncalot.run!(*ARGV)
